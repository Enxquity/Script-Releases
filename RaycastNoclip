--// Noclip Raycast Method Plan thing ye
--[[
    1: Make a loop
    2: Get character and make sure primary part exists
    3: We need to shoot raycasts from humanoid root part in LookVector, -LookVector, RightVector, -RightVector, UpVector
    4: Add a debug mode to show where the raycasts are being fired
    (7): Go through cache and if hit part is in the cache then continue
    (8): If part in cache is not found in any of the raycasts then we set that part to cancollide true and remove it from cache
    5: For any raycast that is hit (and the hit part has cancollide set to true), we need to turn that part to cancollide false! Add this part to a cache table
    6: Go back to start of loop
]]

local RayCache = {}
local CastedRays = {}

_G.Debug = true
_G.Run = true

local Debris = game:GetService("Debris")

while _G.Run == true do
    task.wait(0.01)
    local Character = game.Players.LocalPlayer.Character

    local LoopRays = {}
    if Character and Character:FindFirstChild("HumanoidRootPart") then
        local PrimaryPart = Character:FindFirstChild("HumanoidRootPart")

        for i, CharPart in pairs(Character:GetChildren()) do
            if not CharPart:IsA("BasePart") or CharPart.Name:lower():find("foot") or CharPart.Name:lower():find("leg") then
                continue
            end

            --// Rays
            local RayForward = Ray.new(CharPart.Position, CharPart.CFrame.LookVector * 2)
            local RayBackward = Ray.new(CharPart.Position, -CharPart.CFrame.LookVector * 2)
            local RayRight = Ray.new(CharPart.Position, CharPart.CFrame.RightVector * 2)
            local RayLeft = Ray.new(CharPart.Position, -CharPart.CFrame.RightVector * 2)
            local RayUp = Ray.new(CharPart.Position, CharPart.CFrame.UpVector * 2)
            local RayDown = Ray.new(PrimaryPart.Position - PrimaryPart.CFrame.LookVector * 3, -PrimaryPart.CFrame.UpVector * 25) --// Do this to make sure the floor never go bad

            --// Casted Rays
            ForwardHit, ForwardPos = workspace:FindPartOnRayWithIgnoreList(RayForward, {Character, (workspace:FindFirstChild("RayDebug") and workspace:FindFirstChild("RayDebug") or Character)})
            BackwardHit, BackwardPos = workspace:FindPartOnRayWithIgnoreList(RayBackward, {Character, (workspace:FindFirstChild("RayDebug") and workspace:FindFirstChild("RayDebug") or Character)})
            RightHit, RightPos = workspace:FindPartOnRayWithIgnoreList(RayRight, {Character, (workspace:FindFirstChild("RayDebug") and workspace:FindFirstChild("RayDebug") or Character)})
            LeftHit, LeftPos = workspace:FindPartOnRayWithIgnoreList(RayLeft, {Character, (workspace:FindFirstChild("RayDebug") and workspace:FindFirstChild("RayDebug") or Character)})
            UpHit, UpPos = workspace:FindPartOnRayWithIgnoreList(RayUp, {Character, (workspace:FindFirstChild("RayDebug") and workspace:FindFirstChild("RayDebug") or Character)})
            DownHit, DownPos = workspace:FindPartOnRayWithIgnoreList(RayDown, {Character, (workspace:FindFirstChild("RayDebug") and workspace:FindFirstChild("RayDebug") or Character)})

            CastedRays = {["Forward"] = {ForwardHit, ForwardPos}, ["Backward"] = {BackwardHit, BackwardPos}, ["Right"] = {RightHit, RightPos}, ["Left"] = {LeftHit, LeftPos}, ["Up"] = {UpHit, UpPos}};

            if _G.Debug == true then
                local RayDebug = workspace:FindFirstChild("RayDebug") or Instance.new("Folder", workspace)
                RayDebug.Name = "RayDebug"

                local Rays = CastedRays
                Rays["Down"] = {DownHit, DownPos}
                for i,v in pairs(Rays) do
                    if v and v[2] then
                        local distance = (CharPart.Position - v[2]).Magnitude
                        local p = Instance.new("Part", RayDebug)
                        p.Anchored = true
                        p.CanCollide = false
                        p.Size = Vector3.new(0.1, 0.1, distance)
                        p.CFrame = CFrame.new(CharPart.Position, v[2])*CFrame.new(0, 0, -distance/2)

                        Debris:AddItem(p, 0.01)
                    end
                end
            end
            
            for i,v in pairs(CastedRays) do
                if v and v[1] and v[2] then
                    if DownHit and DownHit == v[1] then
                        v[1].Transparency = 0.8
                        CastedRays[i][1] = nil
                        continue
                    end
                    table.insert(LoopRays, v[1])
                    if v[1].CanCollide == true then
                        if not table.find(RayCache, v[1]) then
                            table.insert(RayCache, v[1])
                        end
                        v[1].CanCollide = false
                    end
                end
            end
        end
        for i,v in pairs(RayCache) do
            if not table.find(LoopRays, v) then
                v.CanCollide = true
                table.remove(RayCache, i)
            end
        end
        LoopRays = {}
    end
end
